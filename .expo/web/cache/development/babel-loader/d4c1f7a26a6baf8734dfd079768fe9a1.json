{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Hayden\\\\programming\\\\StoreStock\\\\screens\\\\BarCode.js\";\nimport React, { useEffect, useState } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport { Camera } from 'expo-camera';\nexport default function BarCode(props) {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      hasPermission = _useState2[0],\n      setHasPermission = _useState2[1];\n\n  var _useState3 = useState(Camera.Constants.Type.back),\n      _useState4 = _slicedToArray(_useState3, 2),\n      type = _useState4[0],\n      setType = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      scanned = _useState6[0],\n      setScanned = _useState6[1];\n\n  var _useState7 = useState(null),\n      _useState8 = _slicedToArray(_useState7, 2),\n      barCodeData = _useState8[0],\n      setBarCodeData = _useState8[1];\n\n  var apiKey = \"\";\n  useEffect(function () {\n    (function _callee() {\n      var _await$Camera$request, status;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Camera.requestPermissionsAsync());\n\n            case 2:\n              _await$Camera$request = _context.sent;\n              status = _await$Camera$request.status;\n              setHasPermission(status === 'granted');\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, []);\n\n  function makeApiCall(barcodeID) {\n    var urlString, response, objectFromJSON;\n    return _regeneratorRuntime.async(function makeApiCall$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            urlString = \"https://api.upcdatabase.org/product/\" + barcodeID + \"?apikey=\" + apiKey;\n            console.log(urlString);\n            _context2.prev = 2;\n            _context2.next = 5;\n            return _regeneratorRuntime.awrap(fetch(urlString));\n\n          case 5:\n            response = _context2.sent;\n            _context2.next = 8;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 8:\n            objectFromJSON = _context2.sent;\n            console.log(\"response from server is\");\n            console.log(objectFromJSON);\n            _context2.next = 16;\n            break;\n\n          case 13:\n            _context2.prev = 13;\n            _context2.t0 = _context2[\"catch\"](2);\n            console.error(_context2.t0);\n\n          case 16:\n            setBarCodeData(objectFromJSON);\n\n          case 17:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[2, 13]], Promise);\n  }\n\n  var handleBarCodeScanned = function handleBarCodeScanned(_ref) {\n    var type = _ref.type,\n        data = _ref.data;\n    setScanned(true);\n    alert(\"Bar code with type \" + type + \" and data \" + data + \" has been scanned!\");\n  };\n\n  if (hasPermission === null) {\n    return React.createElement(View, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 12\n      }\n    });\n  }\n\n  if (hasPermission === false) {\n    return React.createElement(Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 12\n      }\n    }, \"No access to camera\");\n  }\n\n  return React.createElement(View, {\n    style: {\n      flex: 1\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }\n  }, React.createElement(Camera, {\n    style: {\n      flex: 1\n    },\n    type: type,\n    onBarCodeScanned: scanned ? undefined : handleBarCodeScanned,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }, React.createElement(View, {\n    style: {\n      flex: 1,\n      backgroundColor: 'transparent',\n      flexDirection: 'row'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  })), scanned && React.createElement(Button, {\n    title: 'Tap to Scan Again',\n    onPress: function onPress() {\n      return setScanned(false);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 19\n    }\n  }));\n}","map":{"version":3,"sources":["C:/Users/Hayden/programming/StoreStock/screens/BarCode.js"],"names":["React","useEffect","useState","Camera","BarCode","props","hasPermission","setHasPermission","Constants","Type","back","type","setType","scanned","setScanned","barCodeData","setBarCodeData","apiKey","requestPermissionsAsync","status","makeApiCall","barcodeID","urlString","console","log","fetch","response","json","objectFromJSON","error","handleBarCodeScanned","data","alert","flex","undefined","backgroundColor","flexDirection"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { StyleSheet, TouchableOpacity, View, Text, Button} from \"react-native\";\r\nimport { Camera } from 'expo-camera';\r\nexport default function BarCode(props) {\r\n  const [hasPermission, setHasPermission] = useState(null);\r\n  const [type, setType] = useState(Camera.Constants.Type.back);\r\n  const [scanned, setScanned] = useState(false);\r\n  const [barCodeData, setBarCodeData] = useState(null);\r\n  // Do not push api key to public repo\r\n  var apiKey = \"\"\r\n  // Useffect is called on initial render of page to grab camera premissions.\r\n  useEffect(() => {\r\n    (async () => {\r\n      const { status } = await Camera.requestPermissionsAsync();\r\n      setHasPermission(status === 'granted');\r\n    })();\r\n  }, []);\r\n  // Makes API call\r\n  async function makeApiCall(barcodeID){\r\n    let urlString = `https://api.upcdatabase.org/product/${barcodeID}?apikey=${apiKey}`;\r\n    console.log(urlString);\r\n    try {\r\n        //Converting the HTTP response to JS object from JSON payload\r\n        let response = await fetch(urlString);\r\n        var objectFromJSON = await response.json();\r\n        console.log(\"response from server is\");\r\n        console.log(objectFromJSON);\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n      //Once API call is done, chaning the \r\n      setBarCodeData(objectFromJSON)\r\n  }\r\n  // handles barcode being scanned, API fetch logic will go here\r\n  const handleBarCodeScanned = ({ type, data }) => {\r\n    setScanned(true);\r\n    //makeApiCall(data);\r\n    alert(`Bar code with type ${type} and data ${data} has been scanned!`);\r\n  };\r\n\r\n  //Return text componenet if no access to camera is don't have permissions to access camera. \r\n  if (hasPermission === null) {\r\n    return <View />;\r\n  }\r\n  if (hasPermission === false) {\r\n    return <Text>No access to camera</Text>;\r\n  }\r\n  \r\n  return (\r\n    <View style={{ flex: 1 }}>\r\n      <Camera style={{ flex: 1 }} type={type} onBarCodeScanned={scanned ? undefined : handleBarCodeScanned}>\r\n        <View\r\n          style={{\r\n            flex: 1,\r\n            backgroundColor: 'transparent',\r\n            flexDirection: 'row',\r\n          }}>\r\n        </View>\r\n      </Camera>\r\n      {scanned && <Button title={'Tap to Scan Again'} onPress={() => setScanned(false)} />}\r\n    </View>\r\n  );\r\n}"]},"metadata":{},"sourceType":"module"}